import { SzDefinition } from "../shapest/definition.js";
import { defaultBuildingVariant, enumItemProcessorTypes, enumRotaterVariants, formatItemsPerSecond, MetaRotaterBuilding, MOD_ITEM_PROCESSOR_HANDLERS, MOD_ITEM_PROCESSOR_SPEEDS, T, Vector } from "../shapez.js";
import { RESOURCES } from "../types/common.js";
const var41 = defaultBuildingVariant;
const var42 = enumRotaterVariants.ccw;
const var180 = enumRotaterVariants.rotate180;
const var31 = 'rotator-three-right';
const var32 = 'rotator-three-left';
const var81 = 'rotator-8-right';
const var82 = 'rotator-8-left';
export class Rotator3 {
    static process_rotate31_cache = new Map();
    static process_rotate32_cache = new Map();
    static process_rotate81_cache = new Map();
    static process_rotate82_cache = new Map();
    static processOrCached(cache, hash, process) {
        let v = cache.get(hash);
        if (!v)
            cache.set(hash, v = process());
        return v;
    }
    static process_31(payload) {
        const push = (d) => payload.outItems.push({ item: payload.entity.root.shapeDefinitionMgr.getShapeItemFromDefinition(d) });
        let item = payload.items.get(0);
        let def = () => item.definition instanceof SzDefinition ? item.definition
            : SzDefinition.fromRawShape(item.definition);
        push(Rotator3.processOrCached(Rotator3.process_rotate31_cache, item.definition.getHash(), () => def().cloneRotate24(8)));
    }
    static process_32(payload) {
        const push = (d) => payload.outItems.push({ item: payload.entity.root.shapeDefinitionMgr.getShapeItemFromDefinition(d) });
        let item = payload.items.get(0);
        let def = () => item.definition instanceof SzDefinition ? item.definition
            : SzDefinition.fromRawShape(item.definition);
        push(Rotator3.processOrCached(Rotator3.process_rotate32_cache, item.definition.getHash(), () => def().cloneRotate24(24 - 8)));
    }
    static process_81(payload) {
        const push = (d) => payload.outItems.push({ item: payload.entity.root.shapeDefinitionMgr.getShapeItemFromDefinition(d) });
        let item = payload.items.get(0);
        let def = () => item.definition instanceof SzDefinition ? item.definition
            : SzDefinition.fromRawShape(item.definition);
        push(Rotator3.processOrCached(Rotator3.process_rotate81_cache, item.definition.getHash(), () => def().cloneRotate24(3)));
    }
    static process_82(payload) {
        const push = (d) => payload.outItems.push({ item: payload.entity.root.shapeDefinitionMgr.getShapeItemFromDefinition(d) });
        let item = payload.items.get(0);
        let def = () => item.definition instanceof SzDefinition ? item.definition
            : SzDefinition.fromRawShape(item.definition);
        push(Rotator3.processOrCached(Rotator3.process_rotate82_cache, item.definition.getHash(), () => def().cloneRotate24(24 - 3)));
    }
    static install(mod) {
        Object.assign(enumRotaterVariants, {
            [var31]: var31,
            [var32]: var32,
            [var81]: var81,
            [var82]: var82,
        });
        mod.modInterface.addVariantToExistingBuilding(
        // @ts-ignore
        MetaRotaterBuilding, var31, {
            name: "Cutter (Mirrored)",
            description: "A mirrored cutter",
            tutorialImageBase64: RESOURCES.rotate31,
            regularSpriteBase64: RESOURCES.rotate31,
            blueprintSpriteBase64: RESOURCES.rotate31,
            dimensions: new Vector(1, 1),
            additionalStatistics(root) {
                const speed = root.hubGoals.getProcessorBaseSpeed(enumItemProcessorTypes.rotater);
                return [[T.ingame.buildingPlacement.infoTexts.speed, formatItemsPerSecond(speed),],
                ];
            },
            // isUnlocked(root) {
            // 	return true;
            // },
        });
        mod.modInterface.addVariantToExistingBuilding(
        // @ts-ignore
        MetaRotaterBuilding, var32, {
            name: "Cutter (Mirrored)",
            description: "A mirrored cutter",
            tutorialImageBase64: RESOURCES.rotate32,
            regularSpriteBase64: RESOURCES.rotate32,
            blueprintSpriteBase64: RESOURCES.rotate32,
            dimensions: new Vector(1, 1),
            additionalStatistics(root) {
                const speed = root.hubGoals.getProcessorBaseSpeed(enumItemProcessorTypes.rotater);
                return [[T.ingame.buildingPlacement.infoTexts.speed, formatItemsPerSecond(speed),],
                ];
            },
            // isUnlocked(root) {
            // 	return true;
            // },
        });
        mod.modInterface.addVariantToExistingBuilding(
        // @ts-ignore
        MetaRotaterBuilding, var81, {
            name: "Cutter (Mirrored)",
            description: "A mirrored cutter",
            tutorialImageBase64: RESOURCES.rotate81,
            regularSpriteBase64: RESOURCES.rotate81,
            blueprintSpriteBase64: RESOURCES.rotate81,
            dimensions: new Vector(1, 1),
            additionalStatistics(root) {
                const speed = root.hubGoals.getProcessorBaseSpeed(enumItemProcessorTypes.rotater);
                return [[T.ingame.buildingPlacement.infoTexts.speed, formatItemsPerSecond(speed),],
                ];
            },
            // isUnlocked(root) {
            // 	return true;
            // },
        });
        mod.modInterface.addVariantToExistingBuilding(
        // @ts-ignore
        MetaRotaterBuilding, var82, {
            name: "Cutter (Mirrored)",
            description: "A mirrored cutter",
            tutorialImageBase64: RESOURCES.rotate82,
            regularSpriteBase64: RESOURCES.rotate82,
            blueprintSpriteBase64: RESOURCES.rotate82,
            dimensions: new Vector(1, 1),
            additionalStatistics(root) {
                const speed = root.hubGoals.getProcessorBaseSpeed(enumItemProcessorTypes.rotater);
                return [[T.ingame.buildingPlacement.infoTexts.speed, formatItemsPerSecond(speed),],
                ];
            },
            // isUnlocked(root) {
            // 	return true;
            // },
        });
        // Extend instance methods
        mod.modInterface.extendClass(MetaRotaterBuilding, ({ $old }) => ({
            updateVariants(entity, rotationVariant, variant) {
                if (variant === var31) {
                    entity.components.ItemProcessor.type = var31;
                }
                else if (variant === var32) {
                    entity.components.ItemProcessor.type = var32;
                }
                else if (variant === var81) {
                    entity.components.ItemProcessor.type = var81;
                }
                else if (variant === var82) {
                    entity.components.ItemProcessor.type = var82;
                }
                else {
                    $old.updateVariants.call(this, entity, rotationVariant, variant);
                }
            },
            getAvailableVariants(root) {
                let vars = [];
                if (root.hubGoals.isRewardUnlocked('reward_rotater')) {
                    vars.push(var41, var42);
                }
                if (root.hubGoals.isRewardUnlocked('reward_rotater_ccw')) {
                    vars.push(var31, var32);
                }
                if (root.hubGoals.isRewardUnlocked('reward_rotater_180')) {
                    vars.push(var180, var81, var82);
                }
                return vars;
            },
        }));
        function registerProcessor(variant, speed, processor) {
            Object.assign(enumItemProcessorTypes, {
                [variant]: variant
            });
            Object.assign(MOD_ITEM_PROCESSOR_SPEEDS, {
                [variant]: (root) => root.hubGoals.getProcessorBaseSpeed(speed)
            });
            Object.assign(MOD_ITEM_PROCESSOR_HANDLERS, {
                [variant]: processor
            });
        }
        registerProcessor(var31, 'rotater', Rotator3.process_31);
        registerProcessor(var32, 'rotater', Rotator3.process_32);
        registerProcessor(var81, 'rotater', Rotator3.process_81);
        registerProcessor(var82, 'rotater', Rotator3.process_82);
    }
}
//# sourceMappingURL=data:application/json;base64,