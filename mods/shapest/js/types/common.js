import shapez from "../shapez";

const urlRoot = `http://127.0.0.1:5500/shapest-working/sprites/`;
// const urlRoot = `https://dimava.github.io/shapez.mods/shapest-working/sprites/`;
async function fetch64(img) {
    return `${urlRoot}${img}`;
    // http://127.0.0.1:8080/shapest-working/sprites/1.png
    // let r = await fetch(`http://127.0.0.1:8080/shapest-working/sprites/${img}`);
    // let t = await r.text();
    // return `data:image/${img.split('.').pop()};base64,${btoa(t)}`;
}
export const RESOURCES = {
    "flipper.png": await fetch64('flip.png'),
    flipper: await fetch64('flip.png'),
    flip_white: await fetch64('flip_white.png'),
    rotate31: await fetch64('rotate31.png'),
    rotate32: await fetch64('rotate32.png'),
    rotate81: await fetch64('rotate41.png'),
    rotate82: await fetch64('rotate42.png'),
    splitter1: await fetch64('splitter1.png'),
    tut_painter2: await fetch64('tut_painter2.png'),
};
export function strToH(s) {
    let hash = 0;
    for (let c of s) {
        hash = (((hash << 5) - hash) + c.charCodeAt(0)) | 0;
    }
    return hash.toString(16);
}
export function override(cls, name, fn) {
    let oldFnName = name;
    while (cls.prototype[oldFnName])
        oldFnName = '_' + oldFnName;
    cls.prototype[oldFnName] = cls.prototype[name];
    cls.prototype[name] = fn(oldFnName);
}
export function ExtendSuperclass(mod, cls, makeSubclass) {
    mod.modInterface.extendClass(cls, (old) => {
        if (cls.isPrototypeOf(makeSubclass))
            return makeSubclass;
        return makeSubclass(old).prototype;
    });
}
export function ExtendSuperclass2(subclass) {
    let x = subclass.prototype;
    let p = x.__proto__;
    let xd = Object.getOwnPropertyDescriptors(x);
    delete xd.constructor;
    Object.defineProperties(p, xd);
    x.__proto__ = p.__proto__;
}
// export function ExtendSuperclass<
// 	C extends abstract new (...args: any) => any,
// 	T extends InstanceType<C>,
// 	O extends C
// >(mod: Mod, subclass: O): void;
// export function ExtendSuperclass<
// 	C extends abstract new (...args: any) => any,
// 	T extends InstanceType<C>,
// 	O extends C
// >(mod: Mod, cls: C, subclass: O): void;
// export function ExtendSuperclass<
// 	C extends abstract new (...args: any) => any,
// 	T extends InstanceType<C>,
// 	O extends C
// >(mod: Mod, cls: C, subclass: (old: { $old: T }) => O): void;
// export function ExtendSuperclass<
// 	C extends abstract new (...args: any) => any,
// 	T extends InstanceType<C>,
// 	O extends C
// >(mod: Mod, cls: C, subclass?: O | ((old: { $old: T }) => O)): void {
// 	let superclass: C;
// 	let creator: (old: { $old: T }) => O;
// 	function superOverride(X) {
// 		let P = X.__proto__;
// 		let x = X.prototype;
// 		let p = x.__proto__;
// 		console.log({p,x,P,X})
// 		let xd = Object.getOwnPropertyDescriptors(x);
// 		delete xd.constructor;
// 		Object.defineProperties(p, xd);
// 		x.__proto__ = p.__proto__;
// 	}
// }
//# sourceMappingURL=data:application/json;base64,



